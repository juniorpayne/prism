version: '3.8'

# Security-hardened Docker Compose configuration
# This overlay adds security constraints to the production deployment

services:
  server:
    # Security options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Consider using custom seccomp profile
    
    # Run as non-root user
    user: "1000:1000"
    
    # Read-only root filesystem
    read_only: true
    
    # Temporary filesystems for writable directories
    tmpfs:
      - /tmp:mode=1777,size=64m
      - /run:mode=755,size=16m
    
    # Resource limits to prevent DoS
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check with proper timeout
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Drop unnecessary capabilities
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    
    # Disable inter-container communication
    ipc: none
    
    # Custom network configuration
    networks:
      - backend
      - monitoring
    
    # Environment variables for security
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - SECURE_HEADERS=true
      - RATE_LIMIT_ENABLED=true
      - LOG_LEVEL=WARNING
    
    # Volume mounts with specific permissions
    volumes:
      - type: volume
        source: prism_data
        target: /data
        read_only: false
        volume:
          nocopy: true
      - type: bind
        source: ./config
        target: /app/config
        read_only: true

  nginx:
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Run as non-root user (nginx user in container)
    user: "101:101"
    
    # Read-only root filesystem
    read_only: true
    
    # Temporary filesystems
    tmpfs:
      - /var/cache/nginx:uid=101,gid=101
      - /var/run:uid=101,gid=101
      - /tmp:mode=1777
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Drop all capabilities
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    
    # Custom network
    networks:
      - frontend
      - backend
    
    # Rate limiting configuration
    environment:
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_PERIOD=60
      - CLIENT_MAX_BODY_SIZE=10M
    
    # Volume for custom nginx config
    volumes:
      - type: bind
        source: ./nginx/nginx-security.conf
        target: /etc/nginx/conf.d/security.conf
        read_only: true
      - type: bind
        source: ./nginx/modsecurity
        target: /etc/nginx/modsecurity
        read_only: true

# Network isolation
networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-backend
    internal: true  # No external connectivity
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-monitoring
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

# Volumes with specific drivers and options
volumes:
  prism_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/prism/data