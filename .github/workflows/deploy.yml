name: Deploy to EC2

on:
  # Automatic trigger after CI - DISABLED
  # workflow_run:
  #   workflows: ["CI Pipeline"]
  #   types: [completed]
  #   branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      image_tag:
        description: 'Image tag to deploy (optional - defaults to latest for branch)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if health checks fail'
        required: false
        default: false
        type: boolean

env:
  EC2_HOST: 35.170.180.10
  EC2_USER: ubuntu
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}

jobs:
  # Determine deployment parameters
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      image_tag: ${{ steps.setup.outputs.image_tag }}
      should_deploy: ${{ steps.setup.outputs.should_deploy }}
      approval_required: ${{ steps.setup.outputs.approval_required }}
    
    steps:
      - name: Setup deployment parameters
        id: setup
        run: |
          # Determine environment based on trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ inputs.environment }}"
            IMAGE_TAG="${{ inputs.image_tag }}"
            FORCE_DEPLOY="${{ inputs.force_deploy }}"
          else
            # Automatic deployment based on branch
            if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
              ENVIRONMENT="staging"
            elif [[ "${{ github.event.workflow_run.head_branch }}" == "develop" ]]; then
              ENVIRONMENT="development"
            else
              ENVIRONMENT="none"
            fi
            IMAGE_TAG=""
            FORCE_DEPLOY="false"
          fi
          
          # Set image tag if not specified
          if [[ -z "$IMAGE_TAG" ]]; then
            if [[ "$ENVIRONMENT" == "production" ]]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${{ github.event.workflow_run.head_branch || github.ref_name }}-${{ github.event.workflow_run.head_sha || github.sha }}"
            fi
          fi
          
          # Determine if approval is required
          APPROVAL_REQUIRED="false"
          if [[ "$ENVIRONMENT" == "production" ]]; then
            APPROVAL_REQUIRED="true"
          fi
          
          # Determine if we should deploy
          SHOULD_DEPLOY="true"
          if [[ "$ENVIRONMENT" == "none" ]]; then
            SHOULD_DEPLOY="false"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "approval_required=$APPROVAL_REQUIRED" >> $GITHUB_OUTPUT
          echo "force_deploy=$FORCE_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "🚀 Deployment Configuration:"
          echo "Environment: $ENVIRONMENT"
          echo "Image Tag: $IMAGE_TAG"
          echo "Should Deploy: $SHOULD_DEPLOY"
          echo "Approval Required: $APPROVAL_REQUIRED"
          echo "Force Deploy: $FORCE_DEPLOY"

  # Production approval gate
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.approval_required == 'true'
    environment: production
    
    steps:
      - name: Request production deployment approval
        run: |
          echo "🔒 Production deployment requires manual approval"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Image Tag: ${{ needs.setup.outputs.image_tag }}"

  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: [setup, production-approval]
    if: always() && needs.setup.outputs.should_deploy == 'true' && (needs.production-approval.result == 'success' || needs.setup.outputs.approval_required == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify container images exist
        run: |
          echo "🔍 Verifying container images exist in registry..."
          
          IMAGES=(
            "${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/prism-server:${{ needs.setup.outputs.image_tag }}"
            "${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/prism-web:${{ needs.setup.outputs.image_tag }}"
          )
          
          for image in "${IMAGES[@]}"; do
            echo "Checking: $image"
            if docker manifest inspect "$image" > /dev/null 2>&1; then
              echo "✅ Image exists: $image"
            else
              echo "❌ Image not found: $image"
              exit 1
            fi
          done

      - name: Test SSH connection
        run: |
          echo "🔗 Testing SSH connection to EC2 instance..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          # Test SSH connection
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
              "echo 'SSH connection successful'"
          
          # Clean up
          rm /tmp/citadel.pem

      - name: Check current deployment health
        run: |
          echo "🏥 Checking current deployment health..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          # Check current service health
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            echo "Current service status:"
            docker ps --filter "name=prism-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo -e "\nHealth check results:"
            # Check web interface
            if curl -sf http://localhost/ > /dev/null 2>&1; then
              echo "✅ Web interface responding"
            else
              echo "⚠️ Web interface not responding"
            fi
            
            # Check API health
            if curl -sf http://localhost/api/health > /dev/null 2>&1; then
              echo "✅ API health check passed"
            else
              echo "⚠️ API health check failed"
            fi
            
            # Check TCP server
            if nc -z localhost 8080 2>/dev/null; then
              echo "✅ TCP server listening"
            else
              echo "⚠️ TCP server not responding"
            fi
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

  # Main deployment job
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, pre-deployment]
    if: needs.pre-deployment.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deployment-package
          
          # Copy deployment scripts
          cp scripts/deploy-registry.sh deployment-package/
          chmod +x deployment-package/deploy-registry.sh
          
          # Create environment-specific configurations
          cat > deployment-package/deploy-config.env << EOF
          ENVIRONMENT=${{ needs.setup.outputs.environment }}
          IMAGE_TAG=${{ needs.setup.outputs.image_tag }}
          REGISTRY=${{ env.REGISTRY }}
          REGISTRY_NAMESPACE=${{ env.REGISTRY_NAMESPACE }}
          LOG_LEVEL=INFO
          DEPLOYMENT_ID=${{ github.run_id }}
          DEPLOYMENT_SHA=${{ github.sha }}
          EOF
          
          # Create deployment manifest
          cat > deployment-package/deployment-manifest.txt << EOF
          Deployment Information
          =====================
          Environment: ${{ needs.setup.outputs.environment }}
          Image Tag: ${{ needs.setup.outputs.image_tag }}
          Triggered By: ${{ github.actor }}
          Workflow Run: ${{ github.run_id }}
          Commit SHA: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Deployment Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          EOF

      - name: Upload deployment package to EC2
        run: |
          echo "📤 Uploading deployment package to EC2..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          # Create deployment directory on EC2
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
              "mkdir -p ~/deployments/${{ github.run_id }}"
          
          # Upload deployment package
          scp -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              -r deployment-package/* \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/deployments/${{ github.run_id }}/
          
          # Clean up
          rm /tmp/citadel.pem

      - name: Backup current deployment
        run: |
          echo "💾 Creating backup of current deployment..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            BACKUP_DIR="~/deployment-backups/$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"
            mkdir -p "$BACKUP_DIR"
            
            echo "Creating backup in: $BACKUP_DIR"
            
            # Backup current docker-compose files
            if [ -f ~/managedDns/docker-compose.production.yml ]; then
              cp ~/managedDns/docker-compose.production.yml "$BACKUP_DIR/"
            fi
            
            if [ -f ~/managedDns/docker-compose.registry.yml ]; then
              cp ~/managedDns/docker-compose.registry.yml "$BACKUP_DIR/"
            fi
            
            # Backup environment files
            if [ -f ~/managedDns/.env ]; then
              cp ~/managedDns/.env "$BACKUP_DIR/"
            fi
            
            # Save current container information
            docker ps --filter "name=prism-" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" > "$BACKUP_DIR/containers-before.txt"
            
            echo "Backup created successfully"
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

      - name: Perform rolling deployment
        run: |
          echo "🔄 Performing rolling deployment..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            cd ~/deployments/${{ github.run_id }}
            
            # Load deployment configuration
            source ./deploy-config.env
            
            # Log in to container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
            
            echo "🚀 Starting deployment..."
            echo "Environment: $ENVIRONMENT"
            echo "Image Tag: $IMAGE_TAG"
            
            # Change to project directory
            cd ~/managedDns
            
            # Use deployment script to pull and deploy new images
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            GITHUB_REPOSITORY_OWNER="$REGISTRY_NAMESPACE" \
            ~/deployments/${{ github.run_id }}/deploy-registry.sh \
              --tag "$IMAGE_TAG" \
              --namespace "$REGISTRY_NAMESPACE"
            
            echo "✅ Deployment completed"
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

      - name: Post-deployment health checks
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          # Wait for services to stabilize
          sleep 30
          
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            echo "Running comprehensive health checks..."
            HEALTH_CHECK_FAILED=false
            
            # Check container status
            echo "Container status:"
            docker ps --filter "name=prism-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Check if all containers are running
            if ! docker ps --filter "name=prism-server" --filter "status=running" | grep -q prism-server; then
              echo "❌ prism-server is not running"
              HEALTH_CHECK_FAILED=true
            else
              echo "✅ prism-server is running"
            fi
            
            if ! docker ps --filter "name=prism-nginx" --filter "status=running" | grep -q prism-nginx; then
              echo "❌ prism-nginx is not running"
              HEALTH_CHECK_FAILED=true
            else
              echo "✅ prism-nginx is running"
            fi
            
            if ! docker ps --filter "name=prism-database" --filter "status=running" | grep -q prism-database; then
              echo "❌ prism-database is not running"
              HEALTH_CHECK_FAILED=true
            else
              echo "✅ prism-database is running"
            fi
            
            # Wait a bit more for services to fully start
            sleep 15
            
            # Check web interface
            if curl -sf http://localhost/ > /dev/null 2>&1; then
              echo "✅ Web interface responding"
            else
              echo "❌ Web interface not responding"
              HEALTH_CHECK_FAILED=true
            fi
            
            # Check API health
            if curl -sf http://localhost/api/health > /dev/null 2>&1; then
              echo "✅ API health check passed"
            else
              echo "❌ API health check failed"
              HEALTH_CHECK_FAILED=true
            fi
            
            # Check TCP server
            if nc -z localhost 8080 2>/dev/null; then
              echo "✅ TCP server listening"
            else
              echo "❌ TCP server not responding"
              HEALTH_CHECK_FAILED=true
            fi
            
            # Check container logs for errors
            echo "Checking recent container logs for errors..."
            
            # Check server logs
            if docker logs prism-server --since 2m 2>&1 | grep -i error; then
              echo "⚠️ Found errors in server logs"
            else
              echo "✅ No errors in server logs"
            fi
            
            # Check nginx logs
            if docker logs prism-nginx --since 2m 2>&1 | grep -i error; then
              echo "⚠️ Found errors in nginx logs"
            else
              echo "✅ No errors in nginx logs"
            fi
            
            if [ "$HEALTH_CHECK_FAILED" = true ]; then
              echo "❌ Health checks failed!"
              exit 1
            else
              echo "✅ All health checks passed!"
            fi
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

      - name: Run smoke tests
        run: |
          echo "💨 Running smoke tests..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            echo "Running smoke tests..."
            
            # Test web interface content
            echo "Testing web interface content..."
            if curl -s http://localhost/ | grep -q "Prism"; then
              echo "✅ Web interface contains expected content"
            else
              echo "❌ Web interface content test failed"
              exit 1
            fi
            
            # Test API endpoints
            echo "Testing API endpoints..."
            
            # Test health endpoint
            if curl -s http://localhost/api/health | grep -q "status"; then
              echo "✅ Health endpoint returning expected data"
            else
              echo "❌ Health endpoint test failed"
              exit 1
            fi
            
            # Test TCP connection to DNS server
            echo "Testing TCP DNS server connection..."
            if echo "test" | nc -w 5 localhost 8080; then
              echo "✅ TCP DNS server accepting connections"
            else
              echo "❌ TCP DNS server connection test failed"
              exit 1
            fi
            
            echo "✅ All smoke tests passed!"
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

  # Rollback job (runs only on failure)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: failure() && needs.deploy.result == 'failure'
    
    steps:
      - name: Rollback to previous deployment
        run: |
          echo "🔄 Rolling back deployment due to failure..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/citadel.pem
          chmod 600 /tmp/citadel.pem
          
          ssh -i /tmp/citadel.pem \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            
            echo "Finding most recent backup..."
            LATEST_BACKUP=$(ls -1t ~/deployment-backups/ | head -1)
            
            if [ -z "$LATEST_BACKUP" ]; then
              echo "❌ No backup found for rollback"
              exit 1
            fi
            
            echo "Rolling back using backup: $LATEST_BACKUP"
            
            cd ~/managedDns
            
            # Restore previous docker-compose file
            if [ -f ~/deployment-backups/$LATEST_BACKUP/docker-compose.production.yml ]; then
              cp ~/deployment-backups/$LATEST_BACKUP/docker-compose.production.yml .
              echo "✅ Restored docker-compose.production.yml"
            fi
            
            if [ -f ~/deployment-backups/$LATEST_BACKUP/docker-compose.registry.yml ]; then
              cp ~/deployment-backups/$LATEST_BACKUP/docker-compose.registry.yml .
              echo "✅ Restored docker-compose.registry.yml"
            fi
            
            # Restart services with previous configuration
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml up -d
            
            echo "✅ Rollback completed"
            
            # Quick health check
            sleep 20
            if curl -sf http://localhost/ > /dev/null 2>&1; then
              echo "✅ Service restored and responding"
            else
              echo "❌ Service still not responding after rollback"
              exit 1
            fi
          EOF
          
          # Clean up
          rm /tmp/citadel.pem

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [setup, deploy, rollback]
    if: always() && needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ needs.setup.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: \`${{ needs.setup.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "- **Status**: ✅ **SUCCESS** - Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Checks**: ✅ All health checks passed" >> $GITHUB_STEP_SUMMARY
            echo "- **Smoke Tests**: ✅ All smoke tests passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.rollback.result }}" == "success" ]]; then
            echo "- **Status**: 🔄 **ROLLED BACK** - Deployment failed and was rolled back" >> $GITHUB_STEP_SUMMARY
            echo "- **Rollback**: ✅ Successfully rolled back to previous version" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ **FAILED** - Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployed Services" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Interface**: http://${{ env.EC2_HOST }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **API Health**: http://${{ env.EC2_HOST }}/api/health" >> $GITHUB_STEP_SUMMARY
          echo "- **TCP DNS Server**: ${{ env.EC2_HOST }}:8080" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup deployment artifacts
        if: always()
        run: |
          echo "🧹 Deployment workflow completed"