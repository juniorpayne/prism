name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Python Code Quality (Linting)
  python-lint:
    name: Python Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy bandit
          pip install -r requirements.txt
          pip install -r server/requirements.txt

      - name: Run Black (code formatting)
        run: |
          black --check --diff .

      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff .

      - name: Run flake8 (linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Run mypy (type checking)
        run: |
          mypy server/ client/ --ignore-missing-imports
        continue-on-error: true

  # Job 2: JavaScript Code Quality (if applicable)
  javascript-lint:
    name: JavaScript Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for JavaScript files
        id: check-js
        run: |
          if find web/js -name "*.js" | grep -q .; then
            echo "has_js=true" >> $GITHUB_OUTPUT
          else
            echo "has_js=false" >> $GITHUB_OUTPUT
          fi

      - name: Install ESLint (if JS files exist)
        if: steps.check-js.outputs.has_js == 'true'
        run: |
          npm install -g eslint
          # Create basic eslint config if none exists
          if [ ! -f .eslintrc.js ]; then
            echo "module.exports = { env: { browser: true, es2021: true }, extends: ['eslint:recommended'], parserOptions: { ecmaVersion: 'latest' } };" > .eslintrc.js
          fi

      - name: Run ESLint
        if: steps.check-js.outputs.has_js == 'true'
        run: |
          eslint web/js/ --ext .js
        continue-on-error: true

  # Job 3: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt
          pip install -r server/requirements.txt

      - name: Run Bandit (Python security scan)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Run Safety (dependency vulnerability scan)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job 4: Python Tests
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-timeout httpx
          pip install -r requirements.txt
          pip install -r server/requirements.txt

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=server --cov=client --cov-report=xml --cov-report=html --cov-report=term --timeout=300 --cov-fail-under=0
        env:
          PYTHONPATH: ${{ github.workspace }}
        timeout-minutes: 15

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

      - name: Check coverage threshold
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          coverage = float(tree.getroot().attrib['line-rate']) * 100
          print(f'Coverage: {coverage:.1f}%')
          if coverage < 60:
              print('ERROR: Coverage below 60% threshold')
              exit(1)
          else:
              print('SUCCESS: Coverage above threshold')
          "

  # Job 5: Docker Build
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [python-lint, python-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          target: production
          push: false
          load: true
          tags: prism-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build web interface image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          target: production
          push: false
          load: true
          tags: prism-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container security scan
        run: |
          echo "🔍 Running security scan on server image..."
          # Install Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Scan the image
          trivy image --severity HIGH,CRITICAL prism-server:test || true
        continue-on-error: true

      - name: Test container health
        run: |
          # Test that containers start successfully
          docker run --rm -d --name test-server \
            -e PRISM_DATABASE_PATH=/tmp/test.db \
            -p 8081:8081 \
            prism-server:test &
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q test-server; then
            echo "✅ Server container started successfully"
            docker stop test-server
          else
            echo "❌ Server container failed to start"
            docker logs test-server || true
            exit 1
          fi

      - name: Upload Docker scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-reports
          path: |
            trivy-server-report.json

  # Job 6: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: prism_test
          POSTGRES_USER: prism
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r server/requirements.txt

      - name: Run integration tests
        run: |
          pytest tests/ -v -k "integration" --tb=short
        env:
          DATABASE_URL: postgresql://prism:test_password@localhost:5432/prism_test
          PYTHONPATH: ${{ github.workspace }}

  # Job 7: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [python-lint, javascript-lint, security-scan, python-tests, docker-build, integration-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        run: |
          echo "# 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Linting | ${{ needs.python-lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Linting | ${{ needs.javascript-lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ needs.python-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage & Quality" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage**: Check artifacts for detailed coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: Check artifacts for security reports" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: Successfully built and scanned" >> $GITHUB_STEP_SUMMARY

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List generated artifacts
        run: |
          echo "## 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          find . -name "*.xml" -o -name "*.json" -o -name "*.html" | head -10 | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
