name: Direct Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  EC2_HOST: 35.170.180.10
  EC2_USER: ubuntu
  SERVER_IMAGE: 'prism-server:latest'
  WEB_IMAGE: 'prism-web:latest'

jobs:
  build-and-deploy:
    name: Build and Deploy Directly to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          target: production
          push: false
          load: true
          tags: ${{ env.SERVER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build web interface image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          target: production
          push: false
          load: true
          tags: ${{ env.WEB_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker images
        run: |
          echo "💾 Saving Docker images to tarballs..."
          docker save ${{ env.SERVER_IMAGE }} | gzip > prism-server.tar.gz
          docker save ${{ env.WEB_IMAGE }} | gzip > prism-web.tar.gz
          ls -lah *.tar.gz

      - name: Deploy to EC2
        run: |
          echo "🚀 Deploying to EC2..."
          
          # Create SSH key file with proper format
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Test SSH key format
          ssh-keygen -y -f ~/.ssh/deploy_key > /dev/null || {
            echo "❌ Invalid SSH key format"
            exit 1
          }
          
          # Add SSH config for better debugging
          cat > ~/.ssh/config <<EOF
          Host ec2-instance
            HostName ${{ env.EC2_HOST }}
            User ${{ env.EC2_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            LogLevel DEBUG
          EOF
          chmod 600 ~/.ssh/config
          
          # Create deployment directory on EC2
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
            "mkdir -p ~/deployment-tmp"
          
          # Transfer Docker images
          echo "📤 Transferring Docker images to EC2..."
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            prism-server.tar.gz prism-web.tar.gz \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/deployment-tmp/
          
          # Create deployment script
          cat > deploy-script.sh <<'EOF'
          #!/bin/bash
          set -e
          
          echo "🔄 Loading Docker images..."
          cd ~/deployment-tmp
          
          # Load images
          docker load < prism-server.tar.gz
          docker load < prism-web.tar.gz
          
          echo "📁 Setting up deployment directory..."
          cd ~/managedDns || cd ~
          
          # Create docker-compose.yml for production
          cat > docker-compose.production.yml <<'COMPOSE'
          version: '3.8'
          
          services:
            server:
              image: prism-server:latest
              container_name: prism-server
              restart: unless-stopped
              environment:
                - PRISM_SERVER_HOST=0.0.0.0
                - PRISM_SERVER_PORT=8081
                - PRISM_API_PORT=8080
                - PRISM_LOG_LEVEL=INFO
                - PRISM_DATABASE_PATH=/data/prism.db
              volumes:
                - ./data:/data
                - ./config:/app/config
              ports:
                - "8080:8080"
                - "8081:8081"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
            nginx:
              image: prism-web:latest
              container_name: prism-nginx
              restart: unless-stopped
              ports:
                - "80:80"
              depends_on:
                - server
              environment:
                - API_URL=http://server:8080
          COMPOSE
          
          echo "🛑 Stopping existing containers..."
          docker compose -f docker-compose.production.yml down || true
          
          echo "🚀 Starting new containers..."
          docker compose -f docker-compose.production.yml up -d
          
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          echo "🔍 Checking container status..."
          docker compose -f docker-compose.production.yml ps
          
          echo "🧹 Cleaning up deployment files..."
          rm -rf ~/deployment-tmp
          docker image prune -f
          
          echo "✅ Deployment complete!"
          EOF
          
          # Transfer and execute deployment script
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            deploy-script.sh \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/deployment-tmp/
          
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
            "chmod +x ~/deployment-tmp/deploy-script.sh && ~/deployment-tmp/deploy-script.sh"
          
          # Clean up
          rm -f ~/.ssh/deploy_key deploy-script.sh

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # Wait for services to stabilize
          sleep 15
          
          # Check API health
          if curl -f http://${{ env.EC2_HOST }}:8080/api/health; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi
          
          # Check web interface
          if curl -f http://${{ env.EC2_HOST }}; then
            echo "✅ Web interface check passed"
          else
            echo "❌ Web interface check failed"
            exit 1
          fi
          
          echo "✅ All services are healthy!"

      - name: Clean up local artifacts
        if: always()
        run: |
          rm -f prism-server.tar.gz prism-web.tar.gz
          rm -f ~/.ssh/deploy_key deploy-script.sh

      - name: Generate deployment summary
        if: always()
        run: |
          echo "# 🚀 Direct Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: EC2 Instance at ${{ env.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: Direct image transfer (no registry)" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Interface**: http://${{ env.EC2_HOST }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: http://${{ env.EC2_HOST }}:8080/api/health" >> $GITHUB_STEP_SUMMARY
          echo "- **TCP Server**: ${{ env.EC2_HOST }}:8081" >> $GITHUB_STEP_SUMMARY