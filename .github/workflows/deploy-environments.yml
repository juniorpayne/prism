name: Deploy to Environments

on:
  # Automatic deployment triggers - DISABLED
  # push:
  #   branches:
  #     - main        # Deploy to production
  #     - develop     # Deploy to staging
  
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      image_tag:
        description: 'Container image tag to deploy'
        required: false
        default: 'latest'
      force_deploy:
        description: 'Force deployment even if validation fails'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}

jobs:
  # Determine deployment environment
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy_to_production: ${{ steps.env.outputs.deploy_to_production }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
          
          # Set production deployment flag
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "deploy_to_production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_to_production=false" >> $GITHUB_OUTPUT
          fi

  # Validate configuration before deployment
  validate-configuration:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        env:
          # Environment-specific secrets
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
          ALERT_SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEBHOOK }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          echo "Environment variables configured for ${{ needs.determine-environment.outputs.environment }}"

      - name: Validate configuration
        run: |
          ./scripts/generate-config.sh \
            --environment ${{ needs.determine-environment.outputs.environment }} \
            --validate-only \
            --verbose
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
          ALERT_SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEBHOOK }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

  # Deploy to development environment
  deploy-development:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-configuration]
    if: needs.determine-environment.outputs.environment == 'development'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate development configuration
        run: |
          ./scripts/generate-config.sh \
            --environment development \
            --verbose
        env:
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}

      - name: Deploy to development
        run: |
          ./scripts/deploy-with-env.sh \
            --environment development \
            --deploy-type docker-compose \
            --verbose
        env:
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-configuration]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate staging configuration
        run: |
          ./scripts/generate-config.sh \
            --environment staging \
            --verbose
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}

      - name: Deploy to staging
        run: |
          ./scripts/deploy-with-env.sh \
            --environment staging \
            --deploy-type registry \
            --verbose
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}

  # Deploy to production environment (requires approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-configuration]
    if: needs.determine-environment.outputs.deploy_to_production == 'true'
    environment: 
      name: production
      url: https://${{ secrets.SERVER_DOMAIN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate production configuration
        run: |
          ./scripts/generate-config.sh \
            --environment production \
            --verbose
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
          ALERT_SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEBHOOK }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      - name: Setup SSH for production deployment
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to production
        run: |
          ./scripts/deploy-with-env.sh \
            --environment production \
            --target-host ${{ secrets.EC2_HOST }} \
            --deploy-type registry \
            --verbose
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
          ALERT_SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEBHOOK }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      - name: Verify production deployment
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Health check
          curl -f https://${{ secrets.SERVER_DOMAIN }}/api/health
          
          # TCP server check
          nc -z ${{ secrets.EC2_HOST }} 8080
        timeout-minutes: 5

      - name: Notify deployment success
        if: success()
        run: |
          if [[ -n "${{ secrets.ALERT_SLACK_WEBHOOK }}" ]]; then
            curl -X POST "${{ secrets.ALERT_SLACK_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "üöÄ Production deployment successful",
                "attachments": [{
                  "color": "good",
                  "fields": [
                    {"title": "Environment", "value": "production", "short": true},
                    {"title": "Version", "value": "${{ github.sha }}", "short": true},
                    {"title": "Deployed by", "value": "${{ github.actor }}", "short": true}
                  ]
                }]
              }'
          fi

      - name: Notify deployment failure
        if: failure()
        run: |
          if [[ -n "${{ secrets.ALERT_SLACK_WEBHOOK }}" ]]; then
            curl -X POST "${{ secrets.ALERT_SLACK_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "‚ùå Production deployment failed",
                "attachments": [{
                  "color": "danger",
                  "fields": [
                    {"title": "Environment", "value": "production", "short": true},
                    {"title": "Version", "value": "${{ github.sha }}", "short": true},
                    {"title": "Failed step", "value": "${{ job.status }}", "short": true}
                  ]
                }]
              }'
          fi

  # Configuration drift detection
  detect-configuration-drift:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check configuration drift for ${{ matrix.environment }}
        run: |
          # This would compare deployed configuration with expected configuration
          # Implementation depends on your monitoring setup
          echo "Checking configuration drift for ${{ matrix.environment }}"
          
          # Example: Compare environment variables, file checksums, etc.
          ./scripts/generate-config.sh \
            --environment ${{ matrix.environment }} \
            --validate-only
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}

# Schedule configuration drift detection daily
on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC